// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_det
Eigen::VectorXd log_det(Rcpp::List matrix_list, int celltypes_num, int core_num);
RcppExport SEXP _scGeneNet_log_det(SEXP matrix_listSEXP, SEXP celltypes_numSEXP, SEXP core_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type matrix_list(matrix_listSEXP);
    Rcpp::traits::input_parameter< int >::type celltypes_num(celltypes_numSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det(matrix_list, celltypes_num, core_num));
    return rcpp_result_gen;
END_RCPP
}
// log_det_block
Eigen::VectorXd log_det_block(Rcpp::List matrix_list, int celltypes_num, int p_GRN, int core_num);
RcppExport SEXP _scGeneNet_log_det_block(SEXP matrix_listSEXP, SEXP celltypes_numSEXP, SEXP p_GRNSEXP, SEXP core_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type matrix_list(matrix_listSEXP);
    Rcpp::traits::input_parameter< int >::type celltypes_num(celltypes_numSEXP);
    Rcpp::traits::input_parameter< int >::type p_GRN(p_GRNSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det_block(matrix_list, celltypes_num, p_GRN, core_num));
    return rcpp_result_gen;
END_RCPP
}
// log_det_GRN
Eigen::VectorXd log_det_GRN(Rcpp::List matrix_list, int celltypes_num, int p_GRN, int core_num);
RcppExport SEXP _scGeneNet_log_det_GRN(SEXP matrix_listSEXP, SEXP celltypes_numSEXP, SEXP p_GRNSEXP, SEXP core_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type matrix_list(matrix_listSEXP);
    Rcpp::traits::input_parameter< int >::type celltypes_num(celltypes_numSEXP);
    Rcpp::traits::input_parameter< int >::type p_GRN(p_GRNSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det_GRN(matrix_list, celltypes_num, p_GRN, core_num));
    return rcpp_result_gen;
END_RCPP
}
// ADMM1
Eigen::MatrixXd ADMM1(Eigen::SparseMatrix<double> Theta_mat_sparse, Eigen::MatrixXd s_sq_mat_all, Eigen::SparseMatrix<int> obs_mat, Eigen::VectorXd mu_vec_all, Eigen::MatrixXd m_mat_start_all, Eigen::VectorXd S_depth, Eigen::VectorXi var_index_m, int GRN_num, int core_num, int ADMM_maxiter, double th, double rho_input, bool is_rho_input, bool is_rho_constant_nonGRN, bool is_update_nonGRNpart);
RcppExport SEXP _scGeneNet_ADMM1(SEXP Theta_mat_sparseSEXP, SEXP s_sq_mat_allSEXP, SEXP obs_matSEXP, SEXP mu_vec_allSEXP, SEXP m_mat_start_allSEXP, SEXP S_depthSEXP, SEXP var_index_mSEXP, SEXP GRN_numSEXP, SEXP core_numSEXP, SEXP ADMM_maxiterSEXP, SEXP thSEXP, SEXP rho_inputSEXP, SEXP is_rho_inputSEXP, SEXP is_rho_constant_nonGRNSEXP, SEXP is_update_nonGRNpartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type Theta_mat_sparse(Theta_mat_sparseSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type s_sq_mat_all(s_sq_mat_allSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<int> >::type obs_mat(obs_matSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mu_vec_all(mu_vec_allSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m_mat_start_all(m_mat_start_allSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type S_depth(S_depthSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type var_index_m(var_index_mSEXP);
    Rcpp::traits::input_parameter< int >::type GRN_num(GRN_numSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    Rcpp::traits::input_parameter< int >::type ADMM_maxiter(ADMM_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type th(thSEXP);
    Rcpp::traits::input_parameter< double >::type rho_input(rho_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type is_rho_input(is_rho_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type is_rho_constant_nonGRN(is_rho_constant_nonGRNSEXP);
    Rcpp::traits::input_parameter< bool >::type is_update_nonGRNpart(is_update_nonGRNpartSEXP);
    rcpp_result_gen = Rcpp::wrap(ADMM1(Theta_mat_sparse, s_sq_mat_all, obs_mat, mu_vec_all, m_mat_start_all, S_depth, var_index_m, GRN_num, core_num, ADMM_maxiter, th, rho_input, is_rho_input, is_rho_constant_nonGRN, is_update_nonGRNpart));
    return rcpp_result_gen;
END_RCPP
}
// Newtown
Eigen::MatrixXd Newtown(Eigen::VectorXd diag_Theta_all, Eigen::MatrixXd s_sq_mat_start_all, Eigen::MatrixXd m_mat_all, Eigen::VectorXd S_depth_use, Eigen::VectorXi var_index_s, int p_GRN, int core_num, int newtown_maxiter, double th, double low_bound, bool is_update_nonGRNpart);
RcppExport SEXP _scGeneNet_Newtown(SEXP diag_Theta_allSEXP, SEXP s_sq_mat_start_allSEXP, SEXP m_mat_allSEXP, SEXP S_depth_useSEXP, SEXP var_index_sSEXP, SEXP p_GRNSEXP, SEXP core_numSEXP, SEXP newtown_maxiterSEXP, SEXP thSEXP, SEXP low_boundSEXP, SEXP is_update_nonGRNpartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type diag_Theta_all(diag_Theta_allSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type s_sq_mat_start_all(s_sq_mat_start_allSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m_mat_all(m_mat_allSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type S_depth_use(S_depth_useSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type var_index_s(var_index_sSEXP);
    Rcpp::traits::input_parameter< int >::type p_GRN(p_GRNSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    Rcpp::traits::input_parameter< int >::type newtown_maxiter(newtown_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type th(thSEXP);
    Rcpp::traits::input_parameter< double >::type low_bound(low_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type is_update_nonGRNpart(is_update_nonGRNpartSEXP);
    rcpp_result_gen = Rcpp::wrap(Newtown(diag_Theta_all, s_sq_mat_start_all, m_mat_all, S_depth_use, var_index_s, p_GRN, core_num, newtown_maxiter, th, low_bound, is_update_nonGRNpart));
    return rcpp_result_gen;
END_RCPP
}
// Theta_fun
Rcpp::List Theta_fun(Eigen::MatrixXd U_mat, Rcpp::List Theta_mat_list, Rcpp::List m_mat_list, Rcpp::List s_sq_mat_list, int p_GRN, double lambda_use, Eigen::MatrixXd zero_GRN, double stop_threshold, Eigen::VectorXi var_index_Theta, bool penalize_diagonal, bool zero_GRN_use, int core_num);
RcppExport SEXP _scGeneNet_Theta_fun(SEXP U_matSEXP, SEXP Theta_mat_listSEXP, SEXP m_mat_listSEXP, SEXP s_sq_mat_listSEXP, SEXP p_GRNSEXP, SEXP lambda_useSEXP, SEXP zero_GRNSEXP, SEXP stop_thresholdSEXP, SEXP var_index_ThetaSEXP, SEXP penalize_diagonalSEXP, SEXP zero_GRN_useSEXP, SEXP core_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U_mat(U_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Theta_mat_list(Theta_mat_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type m_mat_list(m_mat_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type s_sq_mat_list(s_sq_mat_listSEXP);
    Rcpp::traits::input_parameter< int >::type p_GRN(p_GRNSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_use(lambda_useSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type zero_GRN(zero_GRNSEXP);
    Rcpp::traits::input_parameter< double >::type stop_threshold(stop_thresholdSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type var_index_Theta(var_index_ThetaSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diagonal(penalize_diagonalSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_GRN_use(zero_GRN_useSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    rcpp_result_gen = Rcpp::wrap(Theta_fun(U_mat, Theta_mat_list, m_mat_list, s_sq_mat_list, p_GRN, lambda_use, zero_GRN, stop_threshold, var_index_Theta, penalize_diagonal, zero_GRN_use, core_num));
    return rcpp_result_gen;
END_RCPP
}
// scGeneNet_optim
Rcpp::List scGeneNet_optim(Eigen::VectorXi celltypes_label_input, Eigen::MatrixXd U_mat_input, Eigen::MatrixXd mu_mat_input, Rcpp::List m_mat_list_input, Rcpp::List s_sq_mat_list_input, Eigen::VectorXd pi_vec_input, Eigen::SparseMatrix<int> obs_mat_input, Eigen::VectorXd S_depth_input, Eigen::VectorXi gene_GRN_index_use_input, Rcpp::List Theta_mat_list_input, Eigen::MatrixXd zero_GRN_input, bool if_zero, Eigen::VectorXd log_det_vec_input, double lambda_use, bool penalize_diagonal, int maxit_nonGRN, double MS_update_threshold, int maxit, int minit, double ELBO_threshold, bool verbose, int ADMM_max_step, double ADMM_threshold, int Newton_max_step, double Newton_threshold, double Theta_threshold, int core_num, bool U_fix);
RcppExport SEXP _scGeneNet_scGeneNet_optim(SEXP celltypes_label_inputSEXP, SEXP U_mat_inputSEXP, SEXP mu_mat_inputSEXP, SEXP m_mat_list_inputSEXP, SEXP s_sq_mat_list_inputSEXP, SEXP pi_vec_inputSEXP, SEXP obs_mat_inputSEXP, SEXP S_depth_inputSEXP, SEXP gene_GRN_index_use_inputSEXP, SEXP Theta_mat_list_inputSEXP, SEXP zero_GRN_inputSEXP, SEXP if_zeroSEXP, SEXP log_det_vec_inputSEXP, SEXP lambda_useSEXP, SEXP penalize_diagonalSEXP, SEXP maxit_nonGRNSEXP, SEXP MS_update_thresholdSEXP, SEXP maxitSEXP, SEXP minitSEXP, SEXP ELBO_thresholdSEXP, SEXP verboseSEXP, SEXP ADMM_max_stepSEXP, SEXP ADMM_thresholdSEXP, SEXP Newton_max_stepSEXP, SEXP Newton_thresholdSEXP, SEXP Theta_thresholdSEXP, SEXP core_numSEXP, SEXP U_fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type celltypes_label_input(celltypes_label_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U_mat_input(U_mat_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mu_mat_input(mu_mat_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type m_mat_list_input(m_mat_list_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type s_sq_mat_list_input(s_sq_mat_list_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type pi_vec_input(pi_vec_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<int> >::type obs_mat_input(obs_mat_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type S_depth_input(S_depth_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type gene_GRN_index_use_input(gene_GRN_index_use_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Theta_mat_list_input(Theta_mat_list_inputSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type zero_GRN_input(zero_GRN_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type if_zero(if_zeroSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type log_det_vec_input(log_det_vec_inputSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_use(lambda_useSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diagonal(penalize_diagonalSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_nonGRN(maxit_nonGRNSEXP);
    Rcpp::traits::input_parameter< double >::type MS_update_threshold(MS_update_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type minit(minitSEXP);
    Rcpp::traits::input_parameter< double >::type ELBO_threshold(ELBO_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type ADMM_max_step(ADMM_max_stepSEXP);
    Rcpp::traits::input_parameter< double >::type ADMM_threshold(ADMM_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type Newton_max_step(Newton_max_stepSEXP);
    Rcpp::traits::input_parameter< double >::type Newton_threshold(Newton_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type Theta_threshold(Theta_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type core_num(core_numSEXP);
    Rcpp::traits::input_parameter< bool >::type U_fix(U_fixSEXP);
    rcpp_result_gen = Rcpp::wrap(scGeneNet_optim(celltypes_label_input, U_mat_input, mu_mat_input, m_mat_list_input, s_sq_mat_list_input, pi_vec_input, obs_mat_input, S_depth_input, gene_GRN_index_use_input, Theta_mat_list_input, zero_GRN_input, if_zero, log_det_vec_input, lambda_use, penalize_diagonal, maxit_nonGRN, MS_update_threshold, maxit, minit, ELBO_threshold, verbose, ADMM_max_step, ADMM_threshold, Newton_max_step, Newton_threshold, Theta_threshold, core_num, U_fix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scGeneNet_log_det", (DL_FUNC) &_scGeneNet_log_det, 3},
    {"_scGeneNet_log_det_block", (DL_FUNC) &_scGeneNet_log_det_block, 4},
    {"_scGeneNet_log_det_GRN", (DL_FUNC) &_scGeneNet_log_det_GRN, 4},
    {"_scGeneNet_ADMM1", (DL_FUNC) &_scGeneNet_ADMM1, 15},
    {"_scGeneNet_Newtown", (DL_FUNC) &_scGeneNet_Newtown, 11},
    {"_scGeneNet_Theta_fun", (DL_FUNC) &_scGeneNet_Theta_fun, 12},
    {"_scGeneNet_scGeneNet_optim", (DL_FUNC) &_scGeneNet_scGeneNet_optim, 28},
    {NULL, NULL, 0}
};

RcppExport void R_init_scGeneNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
